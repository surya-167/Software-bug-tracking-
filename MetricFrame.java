/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package fault;
import weka.core.Instances;
import weka.core.converters.CSVLoader;
import weka.core.Instance;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Remove;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.Evaluation;
import java.io.File;
import java.util.Random;
/**
 *
 * @author admin
 */
public class MetricFrame extends javax.swing.JFrame {

    /**
     * Creates new form MetricFrame
     */
    Details dt=new Details();
    
    public MetricFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Andalus", 0, 30)); // NOI18N
        jLabel1.setText("Selected Metrics");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Monospaced", 0, 16)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Andalus", 0, 17)); // NOI18N
        jButton1.setText("Predict Defect");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Andalus", 0, 17)); // NOI18N
        jButton2.setText("Performance");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(208, 208, 208)
                        .addComponent(jButton1)))
                .addContainerGap(110, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(213, 213, 213))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(25, 25, 25))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try
        {
            CSVLoader csv1=new CSVLoader();
            csv1.setSource(new File("temp1.csv"));
            Instances data1=csv1.getDataSet();                                       
            
            if(!dt.selInd.contains(21))
                dt.selInd.add(21);
            
            int s1[]=new int[dt.selInd.size()];
            for(int i=0;i<dt.selInd.size();i++)
                s1[i]=Integer.parseInt(dt.selInd.get(i).toString());
            
            Instances newtr1;
            Remove remove = new Remove();
            remove.setAttributeIndicesArray(s1);            
            remove.setInvertSelection(true);
            remove.setInputFormat(data1);
            newtr1 = Filter.useFilter(data1, remove);
            newtr1.setClassIndex(newtr1.numAttributes() - 1);
            //System.out.println(newtr1);
            
            LinearRegression lr=new LinearRegression();
            lr.buildClassifier(newtr1);
            
            String res="";
            int df1=0;
            for(int i=0;i<newtr1.numInstances();i++)
            {
                double cs=  Math.abs(lr.classifyInstance(newtr1.instance(i)));                
                res=res+(i+1)+" = "+Math.round(cs)+"\n";
                if(Math.round(cs)>0)
                    df1++;
            }
            
            Evaluation ev=new Evaluation(newtr1);
            ev.crossValidateModel(lr, newtr1, 10, new Random(1));
            
            double er1=ev.meanAbsoluteError();
            double er2=ev.rootMeanSquaredError();
            System.out.println(er1+" : "+er2+" : ");
            
            res=res+"\n\nMAE = "+er1+"\n";
            res=res+"\nRMSE = "+er2;
            
            System.out.println("res === "+res);
            
            String res1=allMetric();
            System.out.println(res1);
            String es1[]=res1.split("#");
            double mae1=Double.parseDouble(es1[0]);
            double rmse1=Double.parseDouble(es1[1]);
            double df2=Double.parseDouble(es1[2]);
            Graph1 gr1=new Graph1();
            gr1.displayMAE(mae1, er1);
            gr1.displayRMSE(rmse1, er2);
            gr1.displayDF(df1, df2);
            
            System.out.println("df1== "+df1);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try
        {
            String r1=predict("input//eclipse.csv");
            String r2=predict("input//lucene.csv");
            String r3=predict("input//mylyn.csv");
            String r4=predict("input//pde.csv");
            
            System.out.println(r1);
            System.out.println(r2);
            System.out.println(r3);
            System.out.println(r4);
            
            String g1[]=r1.split("#");
            String g2[]=r2.split("#");
            String g3[]=r3.split("#");
            String g4[]=r4.split("#");
            
            Graph1 gr1=new Graph1();
            gr1.display1(Double.parseDouble(g1[0]), Double.parseDouble(g2[0]),Double.parseDouble(g3[0]), Double.parseDouble(g4[0]));
            gr1.display2(Double.parseDouble(g1[1]), Double.parseDouble(g2[1]),Double.parseDouble(g3[1]), Double.parseDouble(g4[1]));
            gr1.display3(Double.parseDouble(g1[2]), Double.parseDouble(g2[2]),Double.parseDouble(g3[2]), Double.parseDouble(g4[2]));
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    public String allMetric()
    {
        String res="";
        try
        {
            CSVLoader csv1=new CSVLoader();
            csv1.setSource(new File("temp1.csv"));
            Instances data1=csv1.getDataSet();  
            data1.setClassIndex(data1.numAttributes() - 1);
            //System.out.println(newtr1);
            
            
            LinearRegression lr=new LinearRegression();
            lr.buildClassifier(data1);
            
            int df2=0;
            for(int i=0;i<data1.numInstances();i++)
            {
                double cs=  Math.abs(lr.classifyInstance(data1.instance(i)));                
            
                if(Math.round(cs)>0)
                    df2++;
            }
            
            Evaluation ev=new Evaluation(data1);
            ev.crossValidateModel(lr, data1, 10, new Random(1));
            
            double er1=ev.meanAbsoluteError();
            double er2=ev.rootMeanSquaredError();
            
            
            res=er1+"#"+er2+"#"+df2;
            System.out.println(res);
            System.out.println("df2==="+df2);
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return res;
    }
    
    public String predict(String name)
    {
        String res="";
        try
        {
            CSVLoader csv1=new CSVLoader();
            csv1.setSource(new File(name));
            Instances data1=csv1.getDataSet();  
           // data1.setClassIndex(data1.numAttributes() - 1);
            int s1[]={0};
            Instances newtr1;
            Remove remove = new Remove();
            remove.setAttributeIndicesArray(s1);            
            remove.setInvertSelection(false);
            //remove.setInvertSelection(true);
            remove.setInputFormat(data1);
            newtr1 = Filter.useFilter(data1, remove);
            newtr1.setClassIndex(newtr1.numAttributes() - 1);
            
            
            
            
            LinearRegression lr=new LinearRegression();
            lr.buildClassifier(newtr1);
            
             int df2=0;
            for(int i=0;i<newtr1.numInstances();i++)
            {
                double cs=  Math.abs(lr.classifyInstance(newtr1.instance(i)));                
            
                if(Math.round(cs)>0)
                    df2++;
            }
            
            
            Evaluation ev=new Evaluation(newtr1);
            ev.crossValidateModel(lr, newtr1, 10, new Random(1));
            
            double er1=ev.meanAbsoluteError();
            double er2=ev.rootMeanSquaredError();
            
            res=er1+"#"+er2+"#"+df2;
            
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        return res;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MetricFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MetricFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MetricFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MetricFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MetricFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
